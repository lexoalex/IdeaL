<?php 
/**
 *  Implementation of hook_init().
 */
function ideal_init() {

}
/**
 *  Implementation of hook_menu().
 */
function ideal_menu() {
  $items = array();
  $items['home'] = array(
    'title'             => t(''),
    'page callback'     => 'ideal_theme_pages',
    'page arguments'    => array('ideal_home_page'),
    'access arguments'  => array('access content'),
    'type'              => MENU_CALLBACK,
  );
  return $items;
}

/**
 * ideal_theme_pages callback
 */
function ideal_theme_pages($key) {
  return theme($key);
}

/**
 * Implementation of hook_nodeapi().
 */
function ideal_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'presave':      
      if ($node->type == 'idea') {
        if (rules_get_rule_set('rules_points_to_comments_authors')) {
          //get the unchanged node
          $node2 = $node->nid ? node_load($node->nid) : $node;
          //get the comments author on this node.
          $resource = db_query("SELECT cid, uid FROM {comments} WHERE nid = %d", $node->nid);
          //Go over the comments authors and send them to the rule set to grant them points.
          while($row = db_fetch_array( $resource )) {
            $comment_author = user_load($row['uid']);
            rules_invoke_rule_set('rules_points_to_comments_authors', array('user' => $comment_author, 'node' => $node, 'node2' => $node2));         
          }
        }  
      }
  break;
  };
}

/**
 * Implementation of hook_theme()
 */
function ideal_theme($existing, $type, $theme, $path) {
  return array(
    //create a template for home page.
    'ideal_home_page' => array(
      'arguments' => array('titles' => NULL),
      'template' => 'home-page',
      'path' => drupal_get_path('module', 'ideal'),
    ),
    //Override filter.module's theme_filter_tips()
    'filter_tips' => array(
      'function' => 'ideal_filter_tips',
      'arguments' => array('tips' => NULL, 'long' => FALSE, 'extra' => ''),
      'file' => 'ideal.theme.inc',
    ),
    //Override filter.module's theme_filter_tips()
    'filter_tips_more_info' => array(
      'function' => 'ideal_filter_tips_more_info',
      'file' => 'ideal.theme.inc',
    ),
  );
}

/**
 * Implementation of hook_form_alter().
 */
function ideal_form_alter(&$form, $form_state, $form_id) {
  global $user;
  switch ($form_id) {
    case 'idea_node_form':
      if (!(in_array('administrator', array_values($user->roles))) && $user->uid != 1) {
        $vid = _ideal_get_vocabulary_by_machine_name('features_in_action');
        $form['taxonomy'][$vid]['#access']                    = FALSE;
        $form['path']['#access']                              = FALSE;
        $form['comment_settings']['#access']                  = FALSE;
        $form['menu']['#access']                              = FALSE;
        $form['revision_information']['revision']['#access']  = FALSE;
        $form['author']['#access']                            = FALSE;
        $form['options']['#access']                           = FALSE;
        $form['body_field']['teaser_include']['#access']      = FALSE;
      }
      break;
  }
}

/**
 * Implementation of hook_ctools_plugin_dierctory() to let the system
 * know we implement widget plugins.
 */
function ideal_ctools_plugin_directory($module, $plugin) {
  if ($module == 'vud') {
    return $plugin;
  }
}

function _ideal_get_vocabulary_by_machine_name($machine_name) {
  return db_result(db_query("SELECT vid FROM {vocabulary} WHERE module = ('%s')", $machine_name));
}
